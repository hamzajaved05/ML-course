"""
Author: Hamza
Dated: 07.04.2019
Project: IML Tasks
"""
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import torch.utils.data.dataloader
import torchvision
import pandas as pd
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import numpy as np

device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

train = pd.read_csv('train.csv')
nptrain = train.to_numpy();
train, test = train_test_split(nptrain[:,1:],test_size = .2 , random_state= 24)
features = train[:,1:]
testfeatures = test[:,1:]
labels = train[:,0]
testlabels = test[:,0]

scaler = StandardScaler()
scaler.fit(features)
features = scaler.transform(features)
testfeatures = scaler.transform(testfeatures)
data = np.concatenate((features,labels.reshape((-1,1))),axis = 1)
testdata = np.concatenate((testfeatures,testlabels.reshape((-1,1))),axis = 1)
testdata = torch.from_numpy(testdata)
train_loader = torch.utils.data.DataLoader(data , batch_size = 400)


class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv1d(1, 8, 3, 1,padding=1)
        self.conv2 = nn.Conv1d(8, 16, 3, 1, padding=1)
        self.fc1 = nn.Linear(5*16, 8)
        self.fc2 = nn.Linear(8, 3)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.max_pool1d(x, 2)
        x = F.relu(self.conv2(x))
        x = F.max_pool1d(x, 2)
        x = x.view(-1, 16*5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        return F.log_softmax(x, dim=1)

model = Net().to(device)
lossplot= []
optimizer = optim.Adam(model.parameters(), lr=.05)
for epoch in range(1, 500 + 1):
    model.train()
    for batch_idx, data in enumerate(train_loader):
        data = data.to(device).float()
        optimizer.zero_grad()
        output = model((data[:,:-1].unsqueeze(1)))
        output.type()
        loss = F.nll_loss(output, data[:,-1].long())
        lossplot.append(loss)
        loss.backward()
        optimizer.step()
        if batch_idx % 10 == 0:
            model.eval()
            test_loss = 0
            correct = 0
            with torch.no_grad():
                output = model(((testdata[:,:-1]).float()).unsqueeze(1))
                test_loss += F.nll_loss(output, testdata[:,-1].long(), reduction='sum').item()
                pred = output.argmax(dim=1, keepdim=True)
                correct += pred.eq(testdata[:,-1].long().view_as(pred)).sum().item()
            print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
                test_loss, correct, testdata.shape[0],
                100. * correct / testdata.shape[0]))

            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                       100. * batch_idx / len(train_loader), loss.item()))

